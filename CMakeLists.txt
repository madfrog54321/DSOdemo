SET(PROJECT_NAME DSOdemo)

PROJECT(${PROJECT_NAME})
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
#set(CMAKE_VERBOSE_MAKEFILE ON)

set(BUILD_TYPE Release)
set(CMAKE_CXX_FLAGS
   "${SSE_FLAGS} -O3 -g -std=c++0x -march=native -pthread"
#   "${SSE_FLAGS} -O3 -g -std=c++0x -fno-omit-frame-pointer"
)
set(DSO_LIBRARY /mnt/c/Users/konno/Documents/GitKraken/DSOdemo/dso/build/lib/libdso.a)
set(UWEB_SOCKET_LIBRARY /usr/lib/libuWS.so)
set(LibZip_DIR cmake)

find_package(ZLIB QUIET)
find_package(Eigen3 QUIET)
find_package(Boost COMPONENTS system thread QUIET)
find_package(LibZip QUIET)
find_package(OpenCV QUIET)

if(ZLIB_FOUND)
  message("ZLIB found!")
  include_directories( ${ZLIB_INCLUDE_DIRS})
ENDIF()
if(EIGEN3_FOUND)
  message("Eigen3 found!")
  include_directories(${EIGEN3_INCLUDE_DIR})
ENDIF()
if(Boost_FOUND)
  message("Boost found!")
  #include_directories(${BOOST_INCLUDE_DIR})
ENDIF()
if(LibZip_FOUND)
  message("LibZip found!")
  include_directories( ${LIBZIP_INCLUDE_DIR_ZIP} ${LIBZIP_INCLUDE_DIR_ZIPCONF} )
  add_definitions(-DHAS_ZIPLIB=1)
ENDIF()
if(OpenCV_FOUND)
  message("OpenCV found!")
  include_directories( ${OpenCV_INCLUDE_DIRS} )
ENDIF()
if(EXISTS ${DSO_LIBRARY})
  message("DSO found!")
  include_directories(dso/src dso/thirdparty/Sophus)
ENDIF()
if(EXISTS ${UWEB_SOCKET_LIBRARY})
  message("UWEB found!")
  include_directories(/usr/include/uWS)
ENDIF()

add_executable(calib camera_calibration.cpp)
target_link_libraries(calib ${OpenCV_LIBS})

add_executable(opencvDemo opencv_main.cpp)
target_link_libraries(opencvDemo ${OpenCV_LIBS})

add_executable(webDemo demo_main.cpp WebOutputWrapper.cpp)
target_link_libraries(webDemo ${DSO_LIBRARY} ${UWEB_SOCKET_LIBRARY} ${LIBZIP_LIBRARY} ${OpenCV_LIBS} boost_system boost_thread -lssl -lcrypt ${ZLIB_LIBRARIES})

add_executable(socketDemo main.cpp)
target_link_libraries(socketDemo /usr/lib/libuWS.so ${ZLIB_LIBRARIES} -lssl -lcrypt boost_system)

add_executable(liveDemo opencv_dso_main.cpp WebOutputWrapper.cpp)
target_link_libraries(liveDemo ${DSO_LIBRARY} ${UWEB_SOCKET_LIBRARY} ${LIBZIP_LIBRARY} ${OpenCV_LIBS} boost_system boost_thread -lssl -lcrypt ${ZLIB_LIBRARIES})
